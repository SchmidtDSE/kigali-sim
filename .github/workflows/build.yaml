name: Build
on: [push]

permissions:
  actions: read
  contents: read

jobs:
  paper:
    environment: build
    runs-on: ubuntu-latest
    name: Build Paper
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build JOSS preview
        uses: openjournals/openjournals-draft-action@master
        with:
          journal: joss
          paper-path: paper/paper.md
      - name: Upload JOSS preview
        uses: actions/upload-artifact@v4
        with:
          name: paper
          path: paper/paper.pdf
  lintJs:
    environment: build
    runs-on: ubuntu-latest
    name: JS Lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Install node deps
        run: pnpm install
        working-directory: ./editor
      - name: Lint production code
        run: pnpm exec eslint ./js/*.js
        working-directory: ./editor
      - name: Lint test code
        run: pnpm exec eslint ./test/*.js
        working-directory: ./editor
  checkCacheBusters:
    environment: build
    runs-on: ubuntu-latest
    name: Cache Busters Check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Install node deps
        run: pnpm install
        working-directory: ./editor
      - name: Build
        run: bash ./support/make.sh
        working-directory: ./editor
      - name: Install front end deps
        run: bash ./support/install_deps.sh
        working-directory: ./editor
      - name: Prepare deploy
        run: bash ./support/prepare_deploy.sh
        working-directory: ./editor
      - name: Copy guide
        run: cp -r ./docs/guide ./editor/deploy/guide
      - name: Update cache busters
        run: bash ./support/update_version.sh
        working-directory: ./editor
  buildEngine:
    environment: Build
    runs-on: ubuntu-latest
    name: JVM Engine Build
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build fat jar
        run: ./gradlew fatJar
      - name: Upload jar
        uses: actions/upload-artifact@v4
        with:
          name: fatJar
          path: engine/build/libs/kigalisim-fat.jar
  checkEngine:
    needs: buildEngine
    environment: Build
    runs-on: ubuntu-latest
    name: Static Engine Checks
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Check grammar
        run: ./gradlew generateGrammarSource
      - name: Check main style
        run: ./gradlew checkstyleMain
      - name: Check test style
        run: ./gradlew checkstyleTest
  testEngine:
    needs: buildEngine
    environment: Build
    runs-on: ubuntu-latest
    name: Engine Tests
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run tests
        run: ./gradlew test
  runEngineLocal:
    needs: buildEngine
    environment: Build
    runs-on: ubuntu-latest
    name: Run Engine Locally
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download fat jar
        uses: actions/download-artifact@v4
        with:
          name: fatJar
          path: engine/build/libs/
      - name: Run example QTA file with CSV export
        run: java -jar build/libs/kigalisim-fat.jar run ../examples/minimal_interpreter.qta -o /tmp/minimal_interpreter.csv
      - name: Check CSV file was created and is non-empty
        run: |
          if [ ! -f /tmp/minimal_interpreter.csv ]; then
            echo "ERROR: CSV file was not created"
            exit 1
          fi
          if [ ! -s /tmp/minimal_interpreter.csv ]; then
            echo "ERROR: CSV file is empty"
            exit 1
          fi
          echo "SUCCESS: CSV file was created and is non-empty"
          echo "CSV file contents:"
          cat /tmp/minimal_interpreter.csv
  runMonteCarloReplicates:
    needs: [ checkEngine, testEngine, runEngineLocal ]
    environment: Build
    runs-on: ubuntu-latest
    name: Run Monte Carlo Replicates Test
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download fat jar
        uses: actions/download-artifact@v4
        with:
          name: fatJar
          path: engine/build/libs/
      - name: Run Monte Carlo simulation with 100 replicates and normal distribution
        run: java -jar build/libs/kigalisim-fat.jar run ../examples/test_monte_carlo_replicates.qta -o /tmp/monte_carlo_replicates.csv -r 100
      - name: Check CSV file was created and is non-empty
        run: |
          if [ ! -f /tmp/monte_carlo_replicates.csv ]; then
            echo "ERROR: CSV file was not created"
            exit 1
          fi
          if [ ! -s /tmp/monte_carlo_replicates.csv ]; then
            echo "ERROR: CSV file is empty"
            exit 1
          fi
          echo "SUCCESS: CSV file was created and is non-empty"
          echo "Number of lines in CSV:"
          wc -l /tmp/monte_carlo_replicates.csv
          echo "First 10 lines of CSV file:"
          head -10 /tmp/monte_carlo_replicates.csv
  buildWasm:
    environment: Build
    needs: [ checkEngine, buildEngine, testEngine, runEngineLocal ]
    runs-on: ubuntu-latest
    name: WASM Engine Build
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build war
        run: ./gradlew warUnversioned
      - name: Upload war
        uses: actions/upload-artifact@v4
        with:
          name: war
          path: engine/build/libs/KigaliSim.war
  unitTestsBrowser:
    environment: build
    runs-on: ubuntu-latest
    name: Web Tests
    needs: [ buildWasm ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download WASM war
        uses: actions/download-artifact@v4
        with:
          name: war
          path: ./
      - name: Extract WASM files to wasm directory
        run: bash ./support/update_wasm_from_war.sh ../KigaliSim.war
        working-directory: ./editor
      - name: Install node deps
        run: pnpm install
        working-directory: ./editor
      - name: Build
        run: bash ./support/make.sh
        working-directory: ./editor
      - name: Install front end deps
        run: bash ./support/install_deps.sh
        working-directory: ./editor
      - name: Install browser
        run: sudo apt install -y chromium-browser
      - name: Run unit tests
        run: pnpm exec grunt
        working-directory: ./editor
  generateJavadoc:
    environment: build
    runs-on: ubuntu-latest
    name: Generate JavaDoc
    defaults:
      run:
        shell: bash
        working-directory: ./engine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Generate Javadoc
        run: ./gradlew javadoc
      - name: Upload Javadoc
        uses: actions/upload-artifact@v4
        with:
          name: javadoc
          path: engine/build/docs/javadoc
  deployPrep:
    environment: build
    runs-on: ubuntu-latest
    name: Deploy Prep
    needs: [ lintJs, unitTestsBrowser, checkCacheBusters, buildWasm, runMonteCarloReplicates, generateJavadoc ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download WASM war
        uses: actions/download-artifact@v4
        with:
          name: war
          path: ./
      - name: Download fat JAR
        uses: actions/download-artifact@v4
        with:
          name: fatJar
          path: ./
      - name: Extract WASM files to wasm directory
        run: bash ./support/update_wasm_from_war.sh ../KigaliSim.war
        working-directory: ./editor
      - name: Install node deps
        run: pnpm install
        working-directory: ./editor
      - name: Build
        run: bash ./support/make.sh
        working-directory: ./editor
      - name: Install front end deps
        run: bash ./support/install_deps.sh
        working-directory: ./editor
      - name: Prepare deploy
        run: bash ./support/prepare_deploy.sh
        working-directory: ./editor
      - name: Copy guide
        run: cp -r ./docs/guide ./editor/deploy/guide
      - name: Download Javadoc
        uses: actions/download-artifact@v4
        with:
          name: javadoc
          path: ./editor/deploy/guide/javadoc
      - name: Copy case study QTA file to guide
        run: cp ./examples/case_study.qta ./editor/deploy/guide/case_study.qta
      - name: Copy tutorial QTA files to guide
        run: |
          cp ./examples/tutorial_02.qta ./editor/deploy/guide/tutorial_02.qta
          cp ./examples/tutorial_03.qta ./editor/deploy/guide/tutorial_03.qta
          cp ./examples/tutorial_04.qta ./editor/deploy/guide/tutorial_04.qta
          cp ./examples/tutorial_05.qta ./editor/deploy/guide/tutorial_05.qta
          cp ./examples/tutorial_06.qta ./editor/deploy/guide/tutorial_06.qta
          cp ./examples/tutorial_07.qta ./editor/deploy/guide/tutorial_07.qta
      - name: Copy WASM files
        run: cp -r ./editor/wasm ./editor/deploy/wasm
      - name: Copy fat JAR
        run: cp ./kigalisim-fat.jar ./editor/deploy/kigalisim-fat.jar
      - name: Update cache busters
        run: bash ./support/update_version.sh
        working-directory: ./editor
      - name: Upload deploy artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-files
          path: ./editor/deploy
          retention-days: 1
  deployPreview:
    environment: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Preview Deploy
    needs: [deployPrep]
    steps:
      - name: Download deploy artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-files
          path: ./deploy
      - name: Install SSH client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass
      - name: Setup SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p 22 ${{ secrets.SFTPHOST }} >> ~/.ssh/known_hosts
      - name: Upload files via SCP with password
        env:
          SSHPASS: ${{ secrets.SFTPPASSWORD }}
        run: |
          sshpass -e scp -r -P 22 -o StrictHostKeyChecking=no \
            ./deploy/* \
            ${{ secrets.SFTPUSER }}@${{ secrets.SFTPHOST }}:./preview.kigalisim.org/
  deploy:
    environment: deploy
    if: github.ref == 'refs/heads/deploy'
    runs-on: ubuntu-latest
    name: Production Deploy
    needs: [deployPrep]
    steps:
      - name: Download deploy artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-files
          path: ./deploy
      - name: Install SSH client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass
      - name: Setup SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p 22 ${{ secrets.SFTPHOST }} >> ~/.ssh/known_hosts
      - name: Upload files via SCP with password
        env:
          SSHPASS: ${{ secrets.SFTPPASSWORD }}
        run: |
          sshpass -e scp -r -P 22 -o StrictHostKeyChecking=no \
            ./deploy/* \
            ${{ secrets.SFTPUSER }}@${{ secrets.SFTPHOST }}:./kigalisim.org/
  runEngineDockerSanity:
    environment: Build
    if: github.ref == 'refs/heads/deploy'
    runs-on: ubuntu-latest
    name: Docker Prod Check
    needs: [deploy]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t kigalisim .
      - name: Run example QTA file via Docker
        run: docker run -v $(pwd)/examples:/working kigalisim run -o /working/minimal_interpreter_docker.csv /working/minimal_interpreter.qta
      - name: Check CSV file was created and is non-empty
        run: |
          if [ ! -f examples/minimal_interpreter_docker.csv ]; then
            echo "ERROR: CSV file was not created"
            exit 1
          fi
          if [ ! -s examples/minimal_interpreter_docker.csv ]; then
            echo "ERROR: CSV file is empty"
            exit 1
          fi
          echo "SUCCESS: CSV file was created and is non-empty"
          echo "CSV file contents:"
          cat examples/minimal_interpreter_docker.csv
  publishJar:
    environment: deploy
    if: github.ref == 'refs/heads/deploy'
    runs-on: ubuntu-latest
    name: Publish Jar
    needs: [runEngineDockerSanity]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Publish
        run: cd engine; ./gradlew publish
